// <auto-generated />
using System;
using KabaImmo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KabaImmo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KabaImmo.Data.Adresse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Adresse1")
                        .HasColumnType("text");

                    b.Property<string>("Adresse2")
                        .HasColumnType("text");

                    b.Property<string>("Batiment")
                        .HasColumnType("text");

                    b.Property<string>("CodePostal")
                        .HasColumnType("text");

                    b.Property<string>("Employeur")
                        .HasColumnType("text");

                    b.Property<string>("Escalier")
                        .HasColumnType("text");

                    b.Property<string>("Etage")
                        .HasColumnType("text");

                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("Pays")
                        .HasColumnType("text");

                    b.Property<int>("TypeAdresse")
                        .HasColumnType("integer");

                    b.Property<string>("Ville")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Adresse");
                });

            modelBuilder.Entity("KabaImmo.Data.Banque", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CleRib")
                        .HasColumnType("text");

                    b.Property<string>("CodeBanque")
                        .HasColumnType("text");

                    b.Property<string>("CodeGuichet")
                        .HasColumnType("text");

                    b.Property<string>("Iban")
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<string>("NumeroCompte")
                        .HasColumnType("text");

                    b.Property<string>("Swift")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Banque");
                });

            modelBuilder.Entity("KabaImmo.Data.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EmailSecondaire")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Web")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("KabaImmo.Data.Equipements", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<bool>("Service")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Equipements");
                });

            modelBuilder.Entity("KabaImmo.Data.Immeuble", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Superficie")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Immeuble");
                });

            modelBuilder.Entity("KabaImmo.Data.Lot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Animaux")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Charges")
                        .HasColumnType("numeric");

                    b.Property<string>("Couleur")
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateContruction")
                        .HasColumnType("date");

                    b.Property<string>("Dependances")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Fumeur")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LoyerHorsCharges")
                        .HasColumnType("numeric");

                    b.Property<bool>("Meubler")
                        .HasColumnType("boolean");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<string>("Parking")
                        .HasColumnType("text");

                    b.Property<int>("Pieces")
                        .HasColumnType("integer");

                    b.Property<int>("SaleDeBain")
                        .HasColumnType("integer");

                    b.Property<int>("Superficie")
                        .HasColumnType("integer");

                    b.Property<int>("TypeHabitat")
                        .HasColumnType("integer");

                    b.Property<string>("TypeLocation")
                        .HasColumnType("text");

                    b.Property<int>("TypeLot")
                        .HasColumnType("integer");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Lot");
                });

            modelBuilder.Entity("KabaImmo.Data.PieceIdentite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CopyPiece")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Expiration")
                        .HasColumnType("date");

                    b.Property<Guid?>("TypePicesIdentiteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypePicesIdentiteId");

                    b.ToTable("PieceIdentite");
                });

            modelBuilder.Entity("KabaImmo.Data.Societe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Capital")
                        .HasColumnType("numeric");

                    b.Property<string>("Domaine")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<string>("RCS")
                        .HasColumnType("text");

                    b.Property<string>("Signature")
                        .HasColumnType("text");

                    b.Property<string>("TVA")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Societe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KabaImmo.Data.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("KabaImmo.Data.Adresse", b =>
                {
                    b.HasOne("KabaImmo.Data.Immeuble", "Immeuble")
                        .WithOne("Adresse")
                        .HasForeignKey("KabaImmo.Data.Adresse", "Id");

                    b.HasOne("KabaImmo.Data.Societe", "Societe")
                        .WithMany("Adresses")
                        .HasForeignKey("Id");

                    b.Navigation("Immeuble");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("KabaImmo.Data.Banque", b =>
                {
                    b.HasOne("KabaImmo.Data.Adresse", "Adresse")
                        .WithOne("Banque")
                        .HasForeignKey("KabaImmo.Data.Banque", "Id");

                    b.HasOne("KabaImmo.Data.Societe", "Societe")
                        .WithMany("Banques")
                        .HasForeignKey("Id");

                    b.Navigation("Adresse");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("KabaImmo.Data.Contact", b =>
                {
                    b.HasOne("KabaImmo.Data.Immeuble", "Immeuble")
                        .WithMany("Contacts")
                        .HasForeignKey("Id");

                    b.HasOne("KabaImmo.Data.Societe", "Societe")
                        .WithMany("Contacts")
                        .HasForeignKey("Id");

                    b.Navigation("Immeuble");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("KabaImmo.Data.Equipements", b =>
                {
                    b.HasOne("KabaImmo.Data.Immeuble", "Immeuble")
                        .WithMany("Equipements")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KabaImmo.Data.Lot", "Lot")
                        .WithMany("Equipements")
                        .HasForeignKey("Id");

                    b.Navigation("Immeuble");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("KabaImmo.Data.Immeuble", b =>
                {
                    b.HasOne("KabaImmo.Data.Societe", "Societe")
                        .WithMany("Immeuble")
                        .HasForeignKey("Id");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("KabaImmo.Data.Lot", b =>
                {
                    b.HasOne("KabaImmo.Data.Immeuble", "Immeuble")
                        .WithMany("Lot")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Immeuble");
                });

            modelBuilder.Entity("KabaImmo.Data.PieceIdentite", b =>
                {
                    b.HasOne("KabaImmo.Data.Societe", "Societe")
                        .WithMany("PieceIdentite")
                        .HasForeignKey("Id");

                    b.HasOne("KabaImmo.Data.PieceIdentite", "TypePicesIdentite")
                        .WithMany()
                        .HasForeignKey("TypePicesIdentiteId");

                    b.Navigation("Societe");

                    b.Navigation("TypePicesIdentite");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KabaImmo.Data.Adresse", b =>
                {
                    b.Navigation("Banque");
                });

            modelBuilder.Entity("KabaImmo.Data.Immeuble", b =>
                {
                    b.Navigation("Adresse");

                    b.Navigation("Contacts");

                    b.Navigation("Equipements");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("KabaImmo.Data.Lot", b =>
                {
                    b.Navigation("Equipements");
                });

            modelBuilder.Entity("KabaImmo.Data.Societe", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Banques");

                    b.Navigation("Contacts");

                    b.Navigation("Immeuble");

                    b.Navigation("PieceIdentite");
                });
#pragma warning restore 612, 618
        }
    }
}
